name: Action Bootstrap
branding:
  icon: arrow-right-circle
  color: gray-dark
description: |
  This action performs git repo checkout, configures AWS credentials, logs into ECR and generates the image name

inputs:
  run-tag-generator:
    description: Set to false to not run docker meta
    required: false
    default: 'true'
  run-helm-version-generator:
    description: Set to true to run docker meta for helm chart
    required: false
    default: 'false'
  ecr-repo-name:
    required: false
    description: the name of the docker image to configure
    default: ''
  cache-registry-name:
    required: false
    description: the name of the docker registry to use for caching
    default: ''
  ecr-login:
    required: false
    description: 'Set to false to not login to ECR'
    default: 'true'
  aws-account-id:
    required: true
    description: 'aws-account-id to configure'
  role-to-assume:
    required: true
    description: 'role-to-assume to configure'
  role-session-name:
    required: true
    description: 'role-session-name to configure'
  aws-region:
    required: true
    description: 'aws-region to configure'
  checkout-depth:
    required: false
    description: 'The checkout depth. Set to 0 to have a full checkout'
    default: '1'
  load-secrets:
    required: false
    description: 'Load secrets from AWS secrets manager as environment variables'
    default: 'false'
  secret-names:
    required: false
    description: 'The names of the secrets to pull values from'
    default: ''
  parse-json-secrets:
    required: false
    description: 'Create an environment variable for each key-value pair'
    default: 'true'
  gen-artifact-token:
    required: false
    description: 'Set to false to not generate a CodeArtifact auth token'
    default: 'false'
  codeartifact-domain:
    required: false
    description: 'The CodeArtifact Domain'
    default: ''
  codeartifact-region:
    required: false
    description: 'The CodeArtifact AWS Region'
    default: ''

outputs:
  ecr-registry:
    description: 'The ECR registry'
    value: '${{ steps.login-ecr.outputs.registry }}'
  ecr-repo-name:
    description: 'The generated ECR repository name'
    value: '${{ steps.img-name.outputs.ecr-repo-name }}'
  ecr-helm-chart-registry:
    description: 'The generated ECR Helm registry'
    value: '${{ steps.chart-registry.outputs.ecr-helm-chart-registry }}'
  app-version:
    description: 'The current project version'
    value: '${{ steps.meta.outputs.version }}'
  docker-labels:
    description: 'The labels of the docker image'
    value: '${{ steps.meta.outputs.labels }}'
  docker-tags:
    description: 'The tags of the docker image'
    value: '${{ steps.meta.outputs.tags }}'
  docker-cache-input:
    description: 'The tags of the docker image'
    value: '${{ steps.caching-config.outputs.docker-cache-input }}'
  docker-cache-output:
    description: 'The tags of the docker image'
    value: '${{ steps.caching-config.outputs.docker-cache-output }}'
  helm-chart-version:
    description: 'The semver for helm chart version'
    value: '${{ steps.meta-helm.outputs.version }}'
  codeartifact-token:
    description: 'AWS CodeArtifact authorization token'
    value: ${{ steps.codeartifact-token.outputs.codeartifact_token }}


runs:
  using: 'composite'
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      if: (!(github.event_name == 'pull_request' && (github.event.action == 'closed' || github.event.action == 'unlabeled')))
      with:
        persist-credentials: false
        fetch-depth: ${{ inputs.checkout-depth }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4.0.2
      with:
        role-to-assume: ${{ inputs.role-to-assume }}
        role-session-name: ${{ inputs.role-session-name }}
        aws-region: ${{ inputs.aws-region }}

    - name: Load AWS Secrets
      id: load-secrets
      if: inputs.load-secrets == 'true'
      uses: aws-actions/aws-secretsmanager-get-secrets@v2
      with:
        secret-ids: ${{ inputs.secret-names }}
        parse-json-secrets: ${{ inputs.parse-json-secrets }}

    - name: Login to Amazon ECR
      id: login-ecr
      if: inputs.ecr-login == 'true'
      uses: aws-actions/amazon-ecr-login@v2

    - name: Amazon CodeArtifact Auth Token
      id: codeartifact-token
      if: inputs.gen-artifact-token == 'true'
      shell: bash
      run: |
        set -euo pipefail
        echo "Fetching CodeArtifact token..."
        aws --version
        # Debug to confirm AWS identity
        aws sts get-caller-identity

        CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token \
          --domain "${{ inputs.codeartifact-domain }}" \
          --domain-owner "${{ inputs.aws-account-id }}" \
          --region "${{ inputs.codeartifact-region }}" \
          --query authorizationToken \
          --output text)

        if [[ -z "$CODEARTIFACT_AUTH_TOKEN" ]]; then
          echo "ERROR: No token returned from CodeArtifact"
          exit 1
        fi

        echo "Token fetched: $CODEARTIFACT_AUTH_TOKEN"
        echo "codeartifact_token=$CODEARTIFACT_AUTH_TOKEN" >> "$GITHUB_OUTPUT"

    - name: Image Name
      id: img-name
      shell: bash
      if: inputs.run-tag-generator == 'true'
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "ecr-repo-name=${{inputs.aws-account-id}}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/alpha-image/${{ inputs.ecr-repo-name }}" >>"${GITHUB_OUTPUT}"
        else
          echo "ecr-repo-name=${{inputs.aws-account-id}}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/image/${{ inputs.ecr-repo-name }}" >>"${GITHUB_OUTPUT}"
        fi

    - name: Chart Registry
      id: chart-registry
      shell: bash
      if: inputs.run-helm-version-generator == 'true'
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "ecr-helm-repo-name=${{inputs.aws-account-id}}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/alpha-chart/${{ inputs.ecr-repo-name }}" >>"${GITHUB_OUTPUT}"
          echo "ecr-helm-chart-registry=${{inputs.aws-account-id}}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/alpha-chart" >>"${GITHUB_OUTPUT}"
        else
          echo "ecr-helm-repo-name=${{inputs.aws-account-id}}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/image/${{ inputs.ecr-repo-name }}" >>"${GITHUB_OUTPUT}"
          echo "ecr-helm-chart-registry=${{inputs.aws-account-id}}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/chart" >>"${GITHUB_OUTPUT}"
        fi

    - name: Caching Config
      id: caching-config
      shell: bash
      if: inputs.run-tag-generator == 'true' && inputs.cache-registry-name != ''
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          if [[ "$(gh pr -R ${{github.repository}} view "${{ github.event.pull_request.number }}" --json commits -q '.commits | length' || true)" == "1" ]]; then
            echo "docker-cache-input=${{ inputs.cache-registry-name }}/${{ inputs.ecr-repo-name }}:cache" >>"${GITHUB_OUTPUT}"
          else
            echo "docker-cache-input=${{ inputs.cache-registry-name }}/${{ inputs.ecr-repo-name }}:pr${{ github.event.pull_request.number }}-cache" >>"${GITHUB_OUTPUT}"
          fi
          echo "docker-cache-output=${{ inputs.cache-registry-name }}/${{ inputs.ecr-repo-name }}:pr${{ github.event.pull_request.number }}-cache" >>"${GITHUB_OUTPUT}"
        else
          echo "docker-cache-input=${{ inputs.cache-registry-name }}/${{ inputs.ecr-repo-name }}:cache" >>"${GITHUB_OUTPUT}"
          echo "docker-cache-output=${{ inputs.cache-registry-name }}/${{ inputs.ecr-repo-name }}:cache" >>"${GITHUB_OUTPUT}"
        fi

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      if: ((!(github.event_name == 'pull_request' && (github.event.action == 'closed' || github.event.action == 'unlabeled'))) && inputs.run-tag-generator == 'true')
      env:
        DOCKER_METADATA_PR_HEAD_SHA: 'true'
      with:
        images: |
          ${{ steps.img-name.outputs.ecr-repo-name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr,suffix=-{{sha}}
          type=semver,pattern={{version}},prefix=v
          type=semver,pattern={{major}}.{{minor}},prefix=v
          type=semver,pattern={{major}},prefix=v

    - name: Docker meta helm
      id: meta-helm
      uses: docker/metadata-action@v5
      if: ((!(github.event_name == 'pull_request' && (github.event.action == 'closed' || github.event.action == 'unlabeled'))) && inputs.run-helm-version-generator == 'true')
      with:
        images: |
          ${{ steps.chart-registry.outputs.ecr-helm-repo-name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr,prefix=v0.0.0-,suffix=-{{sha}}
          type=semver,pattern={{version}},prefix=v
          type=semver,pattern={{major}}.{{minor}},prefix=v
          type=semver,pattern={{major}},prefix=v
